type Query {
  artists: [Artist!]!
  cities: [City!]!
  city(slug: ID!): City
}

scalar Date
scalar Time
scalar DateTime

type Artist {
  slug: ID!
  name: String!
}

type City {
  slug: ID!
  name: String!
  tags: [Tag!]!
  locations: [Location!]!
  # events: [Events!]!
  firstDate: Date!
  dateAfter: Date!
  days(first: Date!, after: Date!): [Day!]!
}

type Tag {
  slug: ID!
  title: String!
}

type Location {
  slug: ID!
  name: String!
}

type Event {
  title: String
  artist: Artist
  location: Location!
  tags: [Tag!]!
  occurences: [Occurence!]!
}

type Occurence {
  start: DateTime!
}

type Day {
  date: Date!
  events: [DayEvent!]!
}

type DayEvent {
  time: Time!
  title: String
  artist: Artist
  location: Location!
  mainTag: Tag!
  tags: [Tag!]!
  occurences: [Occurence!]!
}

type Mutation {
  putArtist(artist: IArtist!): Artist!
  putLocation(location: ILocation!): Location!
  addEvent(event: IEvent!): Event!
}

input IArtist {
  slug: ID!
  name: String!
}

input ILocation {
  citySlug: ID!
  slug: ID!
  name: String!
}

input IEvent {
  citySlug: ID!
  title: String
  artist: ID
  location: ID!
  tags: [ID!]!
  occurences: [IOccurence!]!
}

input IOccurence {
  start: DateTime!
}
